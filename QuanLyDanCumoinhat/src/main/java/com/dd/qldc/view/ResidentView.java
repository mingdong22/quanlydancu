package com.dd.qldc.view;

import com.dd.qldc.entity.Residents;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Hoàng Đăng
 */
//name sohokhau diachi vaitro ngaysinh sdt
public class ResidentView extends javax.swing.JFrame {

   
 private String [] columnNames = new String [] {
        "STT", "Số hộ khẩu", "Địa chỉ", "Vai trò", "Họ và tên", "Ngày sinh", "Liên hệ"};
 private SimpleDateFormat fDate =new SimpleDateFormat("dd/MM/yyyy");
 
    public ResidentView() {
        initComponents();
    btnAdd.setEnabled(false);
       btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
       btnClear.setEnabled(false);
        btnSearch.setEnabled(false);
        btnCancelSearch.setEnabled(false);
       btnSort.setEnabled(false);
        tableResident.setDefaultRenderer(Object.class, new ResidentView.MyRenderer());
        this.setLocation(35, 15);
        
    }
    //
     private static Image getCircleImage(Image image) {
        int width = image.getWidth(null);
        int height = image.getHeight(null);
        BufferedImage circleImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = circleImage.createGraphics();
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        Ellipse2D.Double circle = new Ellipse2D.Double(0, 0, width, height);
        graphics.setClip(circle);
        graphics.drawImage(image, 0, 0, null);
        graphics.setColor(Color.WHITE);
        graphics.setStroke(new BasicStroke(2));
        graphics.draw(circle);
        return circleImage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchDialog = new javax.swing.JDialog();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        FieldSearch = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        CheckBoxIDFamily = new javax.swing.JCheckBox();
        CheckBoxName = new javax.swing.JCheckBox();
        CheckBoxYear = new javax.swing.JCheckBox();
        CheckBoxAddress = new javax.swing.JCheckBox();
        btnSearchDialog = new javax.swing.JButton();
        btnCancelDialog = new javax.swing.JButton();
        btnGroupSex = new javax.swing.ButtonGroup();
        btnGroupSearch = new javax.swing.ButtonGroup();
        SortDialog = new javax.swing.JDialog();
        jLabel20 = new javax.swing.JLabel();
        CheckBoxSortID1 = new javax.swing.JCheckBox();
        CheckBoxSortName1 = new javax.swing.JCheckBox();
        CheckBoxSortIDFamily1 = new javax.swing.JCheckBox();
        btnCancelSortDialog = new javax.swing.JButton();
        btnokSortDialog = new javax.swing.JButton();
        btnGroupSort = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnHelp = new javax.swing.JButton();
        btnCustom = new javax.swing.JButton();
        btnOut = new javax.swing.JButton();
        btnTool = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnCancelSearch = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnqldtdb = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        FieldName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TextAreaAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        FieldPhone = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ComboBoxRole = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        FieldBirthPlace = new javax.swing.JTextField();
        BirthdayChooser = new com.toedter.calendar.JDateChooser();
        FieldID = new javax.swing.JTextField();
        ComboBoxCMT = new javax.swing.JComboBox<>();
        FieldCMT = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        FieldSum = new javax.swing.JTextField();
        FieldSumFamily = new javax.swing.JTextField();
        FieldSumCCCD = new javax.swing.JTextField();
        FieldSumCMND = new javax.swing.JTextField();
        FieldSumDD = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableResident = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        CMT = new javax.swing.JLabel();
        FieldIDFamily = new javax.swing.JTextField();
        CheckBoxMale = new javax.swing.JCheckBox();
        CheckBoxFemale = new javax.swing.JCheckBox();

        SearchDialog.setSize(new java.awt.Dimension(511, 390));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel15.setText("Tìm Kiếm ");

        jLabel16.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel16.setText("Nhập nội dung tìm kiếm ");

        FieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldSearchActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel17.setText("Chọn tiêu chí tìm kiếm ");

        btnGroupSearch.add(CheckBoxIDFamily);
        CheckBoxIDFamily.setText("Số hộ khẩu");

        btnGroupSearch.add(CheckBoxName);
        CheckBoxName.setText("Tên");

        btnGroupSearch.add(CheckBoxYear);
        CheckBoxYear.setText("Năm sinh");

        btnGroupSearch.add(CheckBoxAddress);
        CheckBoxAddress.setText("Địa chỉ");

        btnSearchDialog.setText("Tìm kiếm ");

        btnCancelDialog.setText("Hủy");

        javax.swing.GroupLayout SearchDialogLayout = new javax.swing.GroupLayout(SearchDialog.getContentPane());
        SearchDialog.getContentPane().setLayout(SearchDialogLayout);
        SearchDialogLayout.setHorizontalGroup(
            SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchDialogLayout.createSequentialGroup()
                .addGroup(SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SearchDialogLayout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(SearchDialogLayout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addGroup(SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel15)))
                        .addGroup(SearchDialogLayout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(CheckBoxIDFamily, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(CheckBoxName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(CheckBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(CheckBoxAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SearchDialogLayout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addComponent(btnSearchDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(135, 135, 135)
                            .addComponent(btnCancelDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SearchDialogLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(FieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        SearchDialogLayout.setVerticalGroup(
            SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchDialogLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addGroup(SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBoxIDFamily)
                    .addComponent(CheckBoxName)
                    .addComponent(CheckBoxYear)
                    .addComponent(CheckBoxAddress))
                .addGap(18, 18, 18)
                .addGroup(SearchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCancelDialog, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(btnSearchDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        SortDialog.setSize(new java.awt.Dimension(511, 390));

        jLabel20.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel20.setText("Chọn tiêu chí sắp xếp ");

        buttonGroup1.add(CheckBoxSortID1);
        CheckBoxSortID1.setText("Sắp xếp theo STT");

        buttonGroup1.add(CheckBoxSortName1);
        CheckBoxSortName1.setText("Sắp xếp theo tên");

        buttonGroup1.add(CheckBoxSortIDFamily1);
        CheckBoxSortIDFamily1.setText("Sắp xếp theo sổ hộ khẩu");

        btnCancelSortDialog.setText("Cancel");

        btnokSortDialog.setText("OK");

        javax.swing.GroupLayout SortDialogLayout = new javax.swing.GroupLayout(SortDialog.getContentPane());
        SortDialog.getContentPane().setLayout(SortDialogLayout);
        SortDialogLayout.setHorizontalGroup(
            SortDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SortDialogLayout.createSequentialGroup()
                .addGroup(SortDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SortDialogLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel20))
                    .addGroup(SortDialogLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(SortDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CheckBoxSortID1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CheckBoxSortName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CheckBoxSortIDFamily1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(SortDialogLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(btnokSortDialog)
                        .addGap(73, 73, 73)
                        .addComponent(btnCancelSortDialog)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        SortDialogLayout.setVerticalGroup(
            SortDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SortDialogLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addComponent(CheckBoxSortID1)
                .addGap(21, 21, 21)
                .addComponent(CheckBoxSortName1)
                .addGap(18, 18, 18)
                .addComponent(CheckBoxSortIDFamily1)
                .addGap(33, 33, 33)
                .addGroup(SortDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelSortDialog)
                    .addComponent(btnokSortDialog))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setVerifyInputWhenFocusTarget(false);

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(204, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnHelp.setBackground(new java.awt.Color(102, 255, 255));
        btnHelp.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/question1..png"))); // NOI18N
        btnHelp.setText("Trợ Giúp");
        btnHelp.setPreferredSize(new java.awt.Dimension(100, 24));
        jPanel6.add(btnHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 155, 72));

        btnCustom.setBackground(new java.awt.Color(102, 255, 255));
        btnCustom.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnCustom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/edit..png"))); // NOI18N
        btnCustom.setText("Tùy Chỉnh");
        jPanel6.add(btnCustom, new org.netbeans.lib.awtextra.AbsoluteConstraints(325, 0, 160, 72));

        btnOut.setBackground(new java.awt.Color(102, 255, 255));
        btnOut.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/back..png"))); // NOI18N
        btnOut.setText("Đăng xuất");
        jPanel6.add(btnOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 0, 150, 72));

        btnTool.setBackground(new java.awt.Color(102, 255, 255));
        btnTool.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/tool1..png"))); // NOI18N
        btnTool.setText("Công Cụ");
        btnTool.setPreferredSize(new java.awt.Dimension(100, 24));
        jPanel6.add(btnTool, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 72));

        jPanel4.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 710, -1));

        btnAdd.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/add..png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jPanel4.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 72, 135, 60));

        btnEdit.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/reset-icon.png"))); // NOI18N
        btnEdit.setText("Cập Nhật");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jPanel4.add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 135, 60));

        btnDelete.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/delete..png"))); // NOI18N
        btnDelete.setText("Xóa");
        jPanel4.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, 135, 60));

        btnClear.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/clear..png"))); // NOI18N
        btnClear.setText("Làm mới");
        jPanel4.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 135, 60));

        btnSearch.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/timkiem..png"))); // NOI18N
        btnSearch.setText("Tìm Kiếm ");
        jPanel4.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 70, 135, 60));

        btnCancelSearch.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnCancelSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/cancel.png"))); // NOI18N
        btnCancelSearch.setText("Hủy Tìm Kiếm ");
        jPanel4.add(btnCancelSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 70, 135, 60));

        btnSort.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSort.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/sapxep..png"))); // NOI18N
        btnSort.setText("Sắp xếp");
        jPanel4.add(btnSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 70, 130, 60));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 70, 1040, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Quản Lý Dân Cư");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 387, -1));

        btnqldtdb.setBackground(new java.awt.Color(102, 255, 255));
        btnqldtdb.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnqldtdb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dd/qldc/images/toipham.png"))); // NOI18N
        btnqldtdb.setText("Quản Lý Đối Tượng Đặc Biệt");
        jPanel2.add(btnqldtdb, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 68, -1, 132));

        ImageIcon imageIcon=new ImageIcon("src/main/java/com/dd/qldc/images/team.png");
        Image image=imageIcon.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        imageIcon=new ImageIcon(image);
        jLabel21.setIcon(imageIcon);
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 60, 50));

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(1390, 750));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Họ và tên:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 86, 36));

        FieldName.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(FieldName, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 150, 37));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Số hộ khẩu:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 86, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Ngày sinh:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 80, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Địa Chỉ:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, 60, 30));

        TextAreaAddress.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(TextAreaAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 200, 40));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Số điện thoại:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 104, 40));

        FieldPhone.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(FieldPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 10, 150, 37));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Giới tính:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 75, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Vai trò:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 80, 60, 30));

        ComboBoxRole.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        ComboBoxRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<none>", "Chủ hộ", "Vợ", "Chồng", "Con", "Bố", "Mẹ", "Họ hàng " }));
        jPanel3.add(ComboBoxRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 70, 130, 40));
        ComboBoxRole.setBounds(970, 100, 260, 40);
        ComboBoxRole.setOpaque(false);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Quê quán:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 20, 80, 30));

        FieldBirthPlace.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(FieldBirthPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 20, 170, 40));

        BirthdayChooser.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(BirthdayChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 170, 38));

        FieldID.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(FieldID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 71, 36));

        ComboBoxCMT.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        ComboBoxCMT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<none>", "CCCD", "CMND", "Định danh" }));
        jPanel3.add(ComboBoxCMT, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 70, -1, 40));
        ComboBoxCMT.setBounds(830, 250, 130, 40);
        ComboBoxRole.setOpaque(false);

        FieldCMT.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(FieldCMT, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 70, 110, 40));

        jPanel5.setBackground(new java.awt.Color(102, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel10.setText("Tổng dân số:");
        jPanel5.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel11.setText("Tổng số hộ dân:");
        jPanel5.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel12.setText("Số người có CCCD:");
        jPanel5.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 190, -1));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel13.setText("Số người có CMND:");
        jPanel5.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel14.setText("Số người có định danh:");
        jPanel5.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        FieldSum.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(FieldSum, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 71, 30));
        FieldSum.setEditable(false);

        FieldSumFamily.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(FieldSumFamily, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 71, 30));
        FieldSumFamily.setEditable(false);

        FieldSumCCCD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(FieldSumCCCD, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 71, 30));
        FieldSumCCCD.setEditable(false);

        FieldSumCMND.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        FieldSumCMND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldSumCMNDActionPerformed(evt);
            }
        });
        jPanel5.add(FieldSumCMND, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 71, 30));
        FieldSumCMND.setEditable(false);

        FieldSumDD.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel5.add(FieldSumDD, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 300, 71, 30));
        FieldSumDD.setEditable(false);

        jLabel19.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Thống kê");
        jPanel5.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 109, -1));

        jPanel3.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 320, 390));

        tableResident.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tableResident.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        jScrollPane2.setViewportView(tableResident);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 135, 1050, 400));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setText("ID:");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 23, -1));

        CMT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CMT.setText("CMT:");
        jPanel3.add(CMT, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 80, -1, -1));

        FieldIDFamily.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jPanel3.add(FieldIDFamily, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, 130, 40));

        btnGroupSex.add(CheckBoxMale);
        CheckBoxMale.setText("Nam");
        jPanel3.add(CheckBoxMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 60, -1));

        btnGroupSex.add(CheckBoxFemale);
        CheckBoxFemale.setText("Nữ");
        jPanel3.add(CheckBoxFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 50, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1447, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       //  btnAdd.addActionListener(listener);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    private void FieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldSearchActionPerformed

    private void FieldSumCMNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldSumCMNDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldSumCMNDActionPerformed
  //Hàm capitalizeWords có tác dụng chuyển đổi chuỗi đầu vào thành một chuỗi mới, trong đó các từ được viết hoa chữ cái đầu tiên của mỗi từ. 
   public static String capitalizeWords(String str) {
        str = str.toLowerCase();
        String[] words = str.split("\\s+");
        StringBuilder sb = new StringBuilder();
        for (String word : words) {
            if (word.length() > 0) {
                if (word.equals("tt") || word.equals("tp") || word.equals("tx")) {
                    sb.append(word.toUpperCase());
                } else {
                    sb.append(Character.toUpperCase(word.charAt(0)));
                    sb.append(word.substring(1));
                }
                sb.append(" ");
            }
        }
        return sb.toString().trim();
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResidentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResidentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResidentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResidentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ResidentView().setVisible(true);
            }
        });
    }
    // kiểm tra (validate= xác nhận )tính hợp lệ của số hộ khẩu nhập vào từ một trường văn bản (text field)
     private boolean validateIDFamily() {
        try {
            String idText = FieldIDFamily.getText().trim();
//idText.matches("\\d+"): Kiểm tra xem chuỗi idText có chứa toàn ký tự số không. Trong biểu thức chính quy \\d+, \\d đại diện cho một chữ số và + đại diện cho việc có ít nhất một chữ số
            if (idText.isEmpty() || !idText.matches("\\d+")) {
                showMessage("Số hộ khẩu không hợp lệ");
                return false;
            }
        } catch (Exception e) {
// Di chuyển trỏ chuột tới trường văn bản FieldIDFamily để người dùng có thể nhập lại thông tin.            
            FieldIDFamily.requestFocus();
            showMessage("Số hộ khẩu không được trống");
            return false;
        }
        return true;
    }
    
    // 
   private boolean validateCMT() {
        try {
            String idText = FieldCMT.getText().trim();
//FieldIDFamily.requestFocus();: Di chuyển trỏ chuột tới trường văn bản FieldIDFamily để người dùng có thể nhập lại thông tin.
            if (idText.isEmpty() || !idText.matches("\\d+")) {
                showMessage("Số chứng minh thư không hợp lệ");
                return false;
            }
        } catch (Exception e) {
 //FieldIDFamily.requestFocus();: Di chuyển trỏ chuột tới trường văn bản FieldIDFamily để người dùng có thể nhập lại thông tin.
            FieldCMT.requestFocus();
            showMessage("Số chứng minh thư không được trống");
            return false;
        }
        return true;
    }
    
    //
      private boolean validateName() {
        String name = FieldName.getText();
        if (name == null || "".equals(name.trim())) {
            FieldName.requestFocus();
            showMessage("Họ và tên không được trống.");
            return false;
        }
        return true;
    }
    //
    private boolean validateTypeCMT() {
        String type = ComboBoxCMT.getSelectedItem().toString().trim();
        if (type.equals("<none>")) {
            ComboBoxCMT.requestFocus();
            showMessage("Bạn chưa chọn loại chứng minh thư");
            return false;
        }
        return true;
    }
  private boolean validateAddress() {
        String address = TextAreaAddress.getText();
        if (address == null || "".equals(address.trim())) {
            TextAreaAddress.requestFocus();
            showMessage("Địa chỉ không được trống.");
            return false;
        }
        return true;
    }
   private boolean validateBirthday() {
        try {
            java.util.Date today=new java.util.Date();
            Date date=BirthdayChooser.getDate();
            if (date.compareTo(today)==1) {
                BirthdayChooser.requestFocus();
                showMessage("Ngày nhập không tồn tại hoặc lớn hơn ngày hôm nay");
                return false;
            }
        } catch (Exception e) {
            BirthdayChooser.requestFocus();
            showMessage("Bạn đã nhập ngày sai định dạng");
            return false;
        }
        return true;
    }
   // 
      private boolean validateSex() {
        if (!CheckBoxMale.isSelected() && !CheckBoxFemale.isSelected()) {
            showMessage("Bạn chưa chọn giới tính");
            return false;
        }
        return true;
    }
    //
    public String validateSearch (){
        String search =FieldSearch.getText();
        if(search ==null||"".equals(search.trim())){
            FieldSearch.requestFocus();
            showMessage("Nội dung tìm kiếm không hợp lệ ");
            return "";
        }
        btnCancelSearch.setEnabled(true);
        SearchDialog.setVisible(false);
        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnClear.setEnabled(false);
        btnSearch.setEnabled(false);
        return search;
    }
    //danh sách
    public void showListResidents(List<Residents> list) {
        int size = list.size();
        // với bảng tableResident có 6 cột, 
        // khởi tạo mảng 2 chiều residents, trong đó:
        // số hàng: là kích thước của list resident 
        // số cột: là 7
        Object [][] residents = new Object[size][7];
        for (int i = 0; i < size; i++) {
            residents[i][0] = list.get(i).getId();
            residents[i][1] = list.get(i).getIDFamily();
            residents[i][2] = list.get(i).getAddress();
            residents[i][3] = list.get(i).getRole();
            residents[i][4] = list.get(i).getName();
            residents[i][5] = fDate.format(list.get(i).getBirthday());
            residents[i][6] = list.get(i).getPhoneNumber();
        }
        //jLabel1.setLayout(null);
        tableResident.getColumnModel().getColumn(0).setWidth(3);
        tableResident.setModel(new DefaultTableModel(residents, columnNames));
        //tableResident.removeColumn(tableResident.getColumnModel().getColumn(6));
    }
    
    
// Hàm showResidents(Residents resident) có tác dụng hiển thị thông tin của một cư dân (Residents) lên giao diện người dùng.
      public void showResidents(Residents resident) 
    {
        FieldIDFamily.setText("" + resident.getIDFamily());
        FieldName.setText(resident.getName());
        BirthdayChooser.setDate(resident.getBirthday());
        TextAreaAddress.setText(resident.getAddress());
        //FieldOpeningDate.setText("" + fDate.format(resident.getOpeningDate()));
        ComboBoxRole.setSelectedItem(""+resident.getRole());
        FieldPhone.setText(""+resident.getPhoneNumber());
        FieldBirthPlace.setText(""+resident.getBirthPlace());
        if ("Nam".equals(resident.getSex())) {
            CheckBoxMale.setSelected(true);
            CheckBoxFemale.setSelected(false);
        } else if ("Nữ".equals(resident.getSex())) {
            CheckBoxMale.setSelected(false);
            CheckBoxFemale.setSelected(true);
        } else {
            CheckBoxMale.setSelected(false);
            CheckBoxFemale.setSelected(false);
        }
        ComboBoxCMT.setSelectedItem(""+resident.getTypeCMT());
        FieldCMT.setText(resident.getCMT());
        // enable Edit and Delete buttons
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        // disable Add button
        btnAdd.setEnabled(false);
        btnClear.setEnabled(true);
    }
    //tìm dân cư theo id
     private Residents findResidentByID(List<Residents> residentsList, int residentID) {
        for (Residents resident : residentsList) {
            if (resident.getId() == residentID) {
                return resident;
            }
        }
        return null; // Trả về null nếu không tìm thấy đối tượng
    }
    //
    public void clearResidentInfo() {
        FieldID.setText("");
        FieldIDFamily.setText("");
        ComboBoxRole.setSelectedItem("<none>");
        FieldName.setText("");
        BirthdayChooser.setDate(null);
        TextAreaAddress.setText("");
        //FieldOpeningDate.setText("");
        CheckBoxMale.setSelected(false);
        CheckBoxFemale.setSelected(false);
        ComboBoxCMT.setSelectedItem("<none>");
        FieldCMT.setText("");
        FieldBirthPlace.setText("");
        FieldPhone.setText("");
        
        // disable Edit and Delete buttons
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        // enable Add button
        btnAdd.setEnabled(true);
    }
    // tổng dân số
    public void showCountListResidents(List<Residents>list){
        int size=list.size();
        FieldSum.setText(String.valueOf(size));
    }
    //phương thức này để hiện lên 1 cửa sổ tìm kiếm 
    public void SearchResidentInfo(){
        SearchDialog.setVisible(true);
    }
    
     
     public void SortResidentInfo(){
         SortDialog.setVisible(true);
     }

     // 
     public void ToolresidentInfo(){
        btnAdd.setEnabled(true);
       btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
       btnClear.setEnabled(true);
        btnSearch.setEnabled(false);
        btnCancelSearch.setEnabled(false);
       btnSort.setEnabled(false);
     }
     public void HelpresidentInfo(){
        btnAdd.setEnabled(false);
       btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
       btnClear.setEnabled(false);
        btnSearch.setEnabled(true);
        btnCancelSearch.setEnabled(true);
       btnSort.setEnabled(true);
     }
     public void CustomresidentInfo(){
         JOptionPane.showMessageDialog(rootPane, " Tính năng chưa cập nhật");
     }
     
    // phương thức này theo tiêu chí sắp xếp 
    /* 
      public int getChooseSelectSort(){
        if(CheckBoxSortID.isSelected()) return 1;
        else if(CheckBoxSortName.isSelected()) return 2;
        else if(CheckBoxSortIDFamily.isSelected()) return 3;
      return 0;
    }
    */
    
  //phương thức  để hiển thị thống kê về các loại giấy tờ tùy thân (CMT) cho một danh sách cư dân.
    public void showStatisticTypeCMT(List<Residents>list){
        Map<String ,Integer>countMap=new HashMap<>();
        for(Residents person :list){
            // Nếu đã có trong countMap, số lần xuất hiện sẽ được tăng thêm 1,
            if(countMap.containsKey(person.getTypeCMT())){
                int count =countMap.get(person.getTypeCMT());
                countMap.put(person.getTypeCMT(), count+1);
            }
            //còn không thì sẽ được thêm mới vào countMap với số lần xuất hiện là 1.
            else{
                countMap.put(person.getTypeCMT(),1);
            }
        }
        for(Map.Entry<String,Integer>entry:countMap.entrySet()){
            String typeCMT=entry.getKey();
            int count =entry.getValue();
            //tìm trường tương ứng với loại CMT và gán giá trị
            switch (typeCMT){
                case "CMND":{
                    FieldSumCMND.setText(String.valueOf(count));
                    break;
                }
                case"CCCD":{
                    FieldSumCCCD.setText(String.valueOf(count));
                    break;
                }
                case"Định danh":{
                    FieldSumDD.setText(String.valueOf(count));
                    break;
                }
            }
        }
    }
    public void sortResidentInfo(){
        SortDialog.setVisible(true);
    }
    //ok sắp xếp 
    public void okDialogSortResidentInfo(){
 SortDialog.setVisible(false);
    }
    //hủy sắp xếp 
     public void cancelshowsortsort(){
         SortDialog.setVisible(false);
     }
    // hủy tìm kiếm 
     public void cancelDialogSearchResidentInfo() {
        //FrameSearch = new ManagerView();
        SearchDialog.setVisible(false);
    }
     
   //phương thức  để hiển thị thống kê về IDFamily một danh sách cư dân.
    public void showStatisticIDFamily(List<Residents>list){
        Map<String ,Integer>countMapIDFamily=new HashMap<>();
         for (Residents person : list) {
            // Thống kê số hộ khẩu IDFamily
            if (countMapIDFamily.containsKey(person.getIDFamily())) {
                int countIDFamily = countMapIDFamily.get(person.getIDFamily());
                countMapIDFamily.put(person.getIDFamily(), countIDFamily + 1);
            } else {
                countMapIDFamily.put(person.getIDFamily(), 1);
            }
        }
          // Gán giá trị thống kê số hộ khẩu IDFamily
        FieldSumFamily.setText(String.valueOf(countMapIDFamily.size()));
    }
    //nó được xử lý nằm trong SearchDialog
        public int getChooseSelectSearch(){
        if(CheckBoxIDFamily.isSelected()) return 1;
        else if(CheckBoxName.isSelected()) return 2;
        else if(CheckBoxYear.isSelected()) return 3;
        else if(CheckBoxAddress.isSelected()) return 4;
        return 0;
    }
    //
         public int getChooseSelectSort(){
        if(CheckBoxSortID1.isSelected()) return 1;
        else if(CheckBoxSortName1.isSelected()) return 2;
        else if(CheckBoxSortIDFamily1.isSelected()) return 3;
        return 0;
    }
    // hủy tìm kiếm 
      public void cancelSearchResident(){
          String id=FieldID.getText();
          btnCancelSearch.setEnabled(false);
          btnSearch.setEnabled(true);
          btnClear.setEnabled(true);
          if(id==null||"".equals(id.trim())){
              btnAdd.setEnabled(false);
              btnEdit.setEnabled(true);
              btnDelete.setEnabled(true);
          }
      }
 //
//     public void fillResidentFromSelectedRow() throws ParseException {
//        // lấy chỉ số của hàng được chọn 
//        int row = tableResident.getSelectedRow();
//        if (row >= 0) {
//            FieldIDFamily.setText(tableResident.getModel().getValueAt(row, 1).toString());
//            TextAreaAddress.setText(tableResident.getModel().getValueAt(row, 2).toString());
//            ComboBoxRole.setSelectedItem(tableResident.getModel().getValueAt(row, 3).toString());
//            FieldName.setText(tableResident.getModel().getValueAt(row, 4).toString());
//            BirthdayChooser.setDate(fDate.parse(tableResident.getModel().getValueAt(row, 5).toString()));
//            FieldPhone.setText(tableResident.getModel().getValueAt(row, 6).toString());
//            
//            // enable Edit and Delete buttons
//            btnEdit.setEnabled(true);
//            btnDelete.setEnabled(true);
//            // disable Add button
//            btnAdd.setEnabled(false);
//            btnClear.setEnabled(true);
//        }
//    }  
    //Nó chỉ đơn giản lấy thông tin từ hàng được chọn trong bảng tableResident mà không cần phải dựa vào một danh sách cư dân nào cả.    
    public void fillResidentFromSelectedRow(List<Residents> list) throws ParseException {
        // lấy chỉ số của hàng được chọn 
        int row = tableResident.getSelectedRow();
        if (row >= 0) {
            int residentID = Integer.parseInt(tableResident.getModel().getValueAt(row, 0).toString());
            Residents selectedResident = findResidentByID(list, residentID);

            if (selectedResident != null) {
                FieldID.setText(String.valueOf(selectedResident.getId()));
                FieldIDFamily.setText(selectedResident.getIDFamily());
                FieldName.setText(selectedResident.getName());
                BirthdayChooser.setDate(selectedResident.getBirthday());
                TextAreaAddress.setText(selectedResident.getAddress());
                //FieldOpeningDate.setText("" + fDate.format(resident.getOpeningDate()));
                ComboBoxRole.setSelectedItem(selectedResident.getRole());
                FieldPhone.setText(selectedResident.getPhoneNumber());
                FieldBirthPlace.setText(selectedResident.getBirthPlace());
                if ("Nam".equals(selectedResident.getSex())) {
                    CheckBoxMale.setSelected(true);
                    CheckBoxFemale.setSelected(false);
                } else if ("Nữ".equals(selectedResident.getSex())) {
                    CheckBoxMale.setSelected(false);
                    CheckBoxFemale.setSelected(true);
                } else {
                    CheckBoxMale.setSelected(false);
                    CheckBoxFemale.setSelected(false);
                }
                ComboBoxCMT.setSelectedItem(selectedResident.getTypeCMT());
                FieldCMT.setText(selectedResident.getCMT());
                // enable Edit and Delete buttons
                btnEdit.setEnabled(true);
                btnDelete.setEnabled(true);
                // disable Add button
                btnAdd.setEnabled(false);
                btnClear.setEnabled(true);
            }
        }
    }
    //hàm này để thông báo 1 message 
     public void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
     //
     public Residents getResidentInfo() {
        // validate residents
        if (!validateIDFamily() || !validateName() || !validateSex() || !validateBirthday() || !validateAddress() || !validateTypeCMT() || !validateCMT()) {
            return null;
        }
        try {
            Residents residents = new Residents();
            if (FieldID.getText() != null && !"".equals(FieldID.getText())) {
                residents.setId(Integer.parseInt(FieldID.getText()));
            }
            if (CheckBoxMale.isSelected()) residents.setSex("Nam"); else residents.setSex("Nữ");
            residents.setIDFamily(FieldIDFamily.getText().trim());
            residents.setRole(ComboBoxRole.getSelectedItem().toString().trim());
            residents.setName(capitalizeWords(FieldName.getText().trim()));
            //residents.setYear(Integer.parseInt(FieldYear.getText().trim()));
            residents.setAddress(capitalizeWords(TextAreaAddress.getText().trim()));
            residents.setBirthday(BirthdayChooser.getDate());
            residents.setTypeCMT(ComboBoxCMT.getSelectedItem().toString().trim());
            residents.setCMT(FieldCMT.getText().trim());
            residents.setBirthPlace(capitalizeWords(FieldBirthPlace.getText().trim()));
            residents.setPhoneNumber(FieldPhone.getText().trim());           
            return residents;
        } catch (Exception e) {
            showMessage(e.getMessage());
        }
        return null;
    }
     // hàm này là sao 
         public class RoundedBorder implements Border {
        private int radius;
        RoundedBorder(int radius) {
            this.radius = radius;
        }
        public Insets getBorderInsets(Component c) {
            return new Insets(this.radius+1, this.radius+1, this.radius+2, this.radius);
        }
        public boolean isBorderOpaque() {
            return true;
        }
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            g.drawRoundRect(x, y, width-1, height-1, radius, radius);
        }
    }
    
    // p
    public void addUndoListener(ActionListener listener){
         btnOut.addActionListener(listener);
    }
      
     public void addAddResidentListener(ActionListener listener) {
        btnAdd.addActionListener(listener);
    }
     //Phương thức này có tác dụng thêm một ListSelectionListener vào tableResident, để lắng nghe sự kiện chọn của danh sách trong bảng. Khi người dùng chọn một hoặc nhiều hàng trong bảng tableResident, ListSelectionListener sẽ được kích hoạt và xử lý sự kiện chọn này
     public void addListResidentSelectionListener(ListSelectionListener listener){
         tableResident.getSelectionModel().addListSelectionListener(listener);
     }
     public void addEditResidentListener(ActionListener listener){
         btnEdit.addActionListener(listener);
     }
     public void addClearListener(ActionListener listener){
         btnClear.addActionListener(listener);
     }
     public void addDeleteSpecialPersonListener(ActionListener listener){
         btnDelete.addActionListener(listener);
     }
   public void addSortSpecialPersonListener(ActionListener listener) {
        btnSort.addActionListener(listener);
    }
   public void addSortoklDialog(ActionListener listener){
      btnokSortDialog.addActionListener(listener);
   }
   public void addSortCancelDialog(ActionListener listener){
       btnCancelDialog.addActionListener(listener);
   }
   
     public void addSearchListener(ActionListener listener){
         btnSearch.addActionListener(listener);
     }
       public void addCancelSearchResidentListener(ActionListener listener){
        btnCancelSearch.addActionListener(listener);
    }
       //xử lý sự kiện nút hủy trong khung tìm kiếm 
       public void addCancelDialogListener(ActionListener listener){
       btnCancelDialog.addActionListener(listener);
    }
    //xử lý sự kiện nút tìm kiếm trong khung tìm kiếm 
     public void addSearchDialogListener(ActionListener listener) {
        btnSearchDialog.addActionListener(listener);
    }
           
           
        // xử lý mấy nút tự chế   
     public void addToolListener(ActionListener listener) {
        btnTool.addActionListener(listener);
    }
      public void addHelpListener(ActionListener listener) {
        btnHelp.addActionListener(listener);
    }
        public void addCustomListener(ActionListener listener) {
        btnCustom.addActionListener(listener);
    }
      public void addqldtdb(ActionListener listener){
          btnqldtdb.addActionListener(listener);
      }
      public void addOut(ActionListener listener){
          btnOut.addActionListener(listener);
      } 
      //
     
      //
   
     
      public void addCancelSort(ActionListener listener){
         btnCancelSortDialog.addActionListener(listener);
      }
      //
      public void addoksort (ActionListener listener){
        btnokSortDialog.addActionListener(listener);
      }
      
      
   
               
     /*  cái này là nút nào ?
     public void addSearchDialogListener(ActionListener listener) {
        btnSearchDialog.addActionListener(listener);
    }
     */
      
      /*
      public void addCancelDialogListener(ActionListener listener){
        btnCancelDialog.addActionListener(listener);
    }
*/
           //
      //
           public class MyRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
            TableColumnModel columnModel=table.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(10);
            columnModel.getColumn(1).setPreferredWidth(60);
            columnModel.getColumn(2).setPreferredWidth(250);
            columnModel.getColumn(3).setPreferredWidth(50);
            columnModel.getColumn(4).setPreferredWidth(130);
            columnModel.getColumn(5).setPreferredWidth(60);
            columnModel.getColumn(5).setPreferredWidth(50);
            //columnModel.getColumn(0).setPreferredWidth(5);
            JTableHeader header = table.getTableHeader();
            header.setBackground(new Color(102, 255, 255));
            header.setForeground(Color.gray);
            header.setFont(new java.awt.Font("Times New Roman", 0, 18));
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
            if (!isSelected) {
                if (row % 2 == 0) {
                    c.setBackground(new Color(0, 204, 204));
                } else {
                    c.setBackground(new Color(204, 255, 255));
                }
            } else {
                c.setBackground(new Color(193, 255, 193));
            }

            return c;
        }
    }
           //
           

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser BirthdayChooser;
    private javax.swing.JLabel CMT;
    private javax.swing.JCheckBox CheckBoxAddress;
    private javax.swing.JCheckBox CheckBoxFemale;
    private javax.swing.JCheckBox CheckBoxIDFamily;
    private javax.swing.JCheckBox CheckBoxMale;
    private javax.swing.JCheckBox CheckBoxName;
    private javax.swing.JCheckBox CheckBoxSortID1;
    private javax.swing.JCheckBox CheckBoxSortIDFamily1;
    private javax.swing.JCheckBox CheckBoxSortName1;
    private javax.swing.JCheckBox CheckBoxYear;
    private javax.swing.JComboBox<String> ComboBoxCMT;
    private javax.swing.JComboBox<String> ComboBoxRole;
    private javax.swing.JTextField FieldBirthPlace;
    private javax.swing.JTextField FieldCMT;
    private javax.swing.JTextField FieldID;
    private javax.swing.JTextField FieldIDFamily;
    private javax.swing.JTextField FieldName;
    private javax.swing.JTextField FieldPhone;
    private javax.swing.JTextField FieldSearch;
    private javax.swing.JTextField FieldSum;
    private javax.swing.JTextField FieldSumCCCD;
    private javax.swing.JTextField FieldSumCMND;
    private javax.swing.JTextField FieldSumDD;
    private javax.swing.JTextField FieldSumFamily;
    private javax.swing.JDialog SearchDialog;
    private javax.swing.JDialog SortDialog;
    private javax.swing.JTextField TextAreaAddress;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancelDialog;
    private javax.swing.JButton btnCancelSearch;
    private javax.swing.JButton btnCancelSortDialog;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCustom;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.ButtonGroup btnGroupSearch;
    private javax.swing.ButtonGroup btnGroupSex;
    private javax.swing.ButtonGroup btnGroupSort;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchDialog;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnTool;
    private javax.swing.JButton btnokSortDialog;
    private javax.swing.JButton btnqldtdb;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableResident;
    // End of variables declaration//GEN-END:variables
}
